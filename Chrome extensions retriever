[CmdletBinding()]
param()
process{
    # Path de usuario
    $UserPaths = (Get-WmiObject win32_userprofile | Where-Object localpath -notmatch 'Windows').localpath
    foreach ($Path in $UserPaths) {
        # Path de extensiones de chrome
        $ExtPath = $Path + '\' + '\AppData\Local\Google\Chrome\User Data\Default\Extensions'
        if (Test-Path $ExtPath) {
            # usuario
            $Username = $Path | Split-Path -Leaf
            # carpetas de extensioenes
            $ExtFolders = Get-Childitem $ExtPath | Where-Object Name -ne 'Temp'
            foreach ($Folder in $ExtFolders) {
                # versiones de las extensiones
                $VerFolders = Get-Childitem $Folder.FullName
                foreach ($Version in $VerFolders) {
                    # checa json manifeste
                    if (Test-Path -Path ($Version.FullName + '\manifest.json')) {
                        $Manifest = Get-Content ($Version.FullName + '\manifest.json') | ConvertFrom-Json
                        # compara nombre xtensiones
                        if ($Manifest.name -like '__MSG*') {
                            $AppId = ($Manifest.name -replace '__MSG_','').Trim('_')
                            # checa carpetas adicionales
                            @('\_locales\en_US\', '\_locales\en\') | ForEach-Object {
                                if (Test-Path -Path ($Version.Fullname + $_ + 'messages.json')) {
                                    $AppManifest = Get-Content ($Version.Fullname + $_ +
                                    'messages.json') | ConvertFrom-Json
                                    # Comprueba los nombres de aplicaciones potenciales en el json y guarda el primero que encuentre
                                    @($AppManifest.appName.message, $AppManifest.extName.message,
                                    $AppManifest.extensionName.message, $AppManifest.app_name.message,
                                    $AppManifest.application_title.message, $AppManifest.$AppId.message) |
                                    ForEach-Object {
                                        if (($_) -and (-not($ExtName))) {
                                            $ExtName = $_
                                        }
                                    }
                                }
                            }
                        }
                        else {
                            # Capture extension name
                            $ExtName = $Manifest.name
                        }
                        # Output formatted string
                        Write-Output (($Path | Split-Path -Leaf) + ": " + [string] $ExtName +
                        " v" + $Manifest.version + " (" + $Folder.name + ")")
                        # Reset extension name for next lookup
                        if ($ExtName) {
                            Remove-Variable -Name ExtName
                        }
                    }
                }
            }
        }
    }
}
